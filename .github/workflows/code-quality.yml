name: Code Quality Checks

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  # Frontend TypeScript/Next.js checks
  frontend-checks:
    name: Frontend Code Quality
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: TypeScript type checking
      run: npx tsc --noEmit
      
    - name: ESLint check
      run: npm run lint
      
    - name: Check code formatting with Prettier
      run: |
        npx prettier --check "src/**/*.{ts,tsx,js,jsx}" "*.{js,ts,json}" || (echo "Code formatting issues found. Run 'npx prettier --write' to fix." && exit 1)
      continue-on-error: true

  # Python FastAPI services checks
  python-checks:
    name: Python Code Quality
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [ai, api]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        
    - name: Install dependencies
      run: |
        cd services/${{ matrix.service }}
        pip install -r requirements.txt
        pip install black flake8 isort mypy pytest-cov
        
    - name: Black code formatting check
      run: |
        cd services/${{ matrix.service }}
        black --check --diff .
        
    - name: isort import sorting check
      run: |
        cd services/${{ matrix.service }}
        isort --check-only --diff .
        
    - name: Flake8 linting
      run: |
        cd services/${{ matrix.service }}
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
        
    - name: MyPy type checking
      run: |
        cd services/${{ matrix.service }}
        mypy . --ignore-missing-imports || true
        
    - name: Run tests
      run: |
        cd services/${{ matrix.service }}
        python -m pytest tests/ -v --cov=. --cov-report=xml
        
    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./services/${{ matrix.service }}/coverage.xml
        flags: ${{ matrix.service }}

  # Database schema validation
  database-checks:
    name: Database Schema Validation
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Validate Prisma schema
      run: npx prisma validate
      
    - name: Check Prisma format
      run: npx prisma format --check

  # Security checks
  security-checks:
    name: Security Checks
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run npm audit
      run: npm audit --audit-level moderate
      
    - name: Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        
    - name: Install Python security tools
      run: |
        pip install safety bandit
        
    - name: Check Python dependencies for vulnerabilities
      run: |
        cd services/ai && safety check
        cd ../api && safety check
        
    - name: Run Bandit security linter
      run: |
        cd services/ai && bandit -r . -f json -o bandit-report.json || true
        cd ../api && bandit -r . -f json -o bandit-report.json || true

  # Docker checks
  docker-checks:
    name: Docker Configuration Check
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Validate Docker Compose
      run: |
        cd docker
        docker-compose config

  # Overall quality report
  quality-report:
    name: Quality Report
    runs-on: ubuntu-latest
    needs: [frontend-checks, python-checks, database-checks, security-checks, docker-checks]
    if: always()
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Generate quality report
      run: |
        echo "## Code Quality Report" >> $GITHUB_STEP_SUMMARY
        echo "| Check | Status |" >> $GITHUB_STEP_SUMMARY
        echo "|-------|--------|" >> $GITHUB_STEP_SUMMARY
        echo "| Frontend (TypeScript/ESLint) | ${{ needs.frontend-checks.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Python (Black/isort/Flake8) | ${{ needs.python-checks.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Database (Prisma) | ${{ needs.database-checks.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Security | ${{ needs.security-checks.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Docker | ${{ needs.docker-checks.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
