// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  username  String?  @unique
  password  String
  avatar    String?
  balance   Float    @default(0.0)
  totalWins Int      @default(0)
  totalLosses Int    @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  posts Post[]
  comments Comment[]
  bets Bet[]
  friendsAsUser Friend[] @relation("UserFriends")
  friendsAsFriend Friend[] @relation("FriendOf")
  accounts Account[]
  sessions Session[]

  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model Post {
  id        String   @id @default(cuid())
  title     String
  content   String?  @db.Text
  published Boolean  @default(false)
  likes     Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  authorId  String

  author User @relation(fields: [authorId], references: [id], onDelete: Cascade)
  comments Comment[]

  @@map("posts")
}

model Comment {
  id        String   @id @default(cuid())
  content   String   @db.Text
  likes     Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  authorId  String
  postId    String

  author User @relation(fields: [authorId], references: [id], onDelete: Cascade)
  post   Post @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@map("comments")
}

model Friend {
  id        String   @id @default(cuid())
  userId    String
  friendId  String
  status    String   @default("pending") // pending, accepted, blocked
  createdAt DateTime @default(now())

  user   User @relation("UserFriends", fields: [userId], references: [id], onDelete: Cascade)
  friend User @relation("FriendOf", fields: [friendId], references: [id], onDelete: Cascade)

  @@unique([userId, friendId])
  @@map("friends")
}

model Game {
  id          String   @id @default(cuid())
  homeTeam    String
  awayTeam    String
  homeOdds    Float
  awayOdds    Float
  drawOdds    Float?
  gameTime    DateTime
  status      String   @default("upcoming") // upcoming, live, finished
  league      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  bets Bet[]

  @@map("games")
}

model Bet {
  id        String   @id @default(cuid())
  amount    Float
  odds      Float
  type      String   // win, draw, over, under, etc.
  status    String   @default("pending") // pending, won, lost, cancelled
  payout    Float?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String
  gameId    String

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  game Game @relation(fields: [gameId], references: [id], onDelete: Cascade)

  @@map("bets")
}

model BettingAssistant {
  id        String   @id @default(cuid())
  question  String   @db.Text
  response  String   @db.Text
  userId    String
  createdAt DateTime @default(now())

  @@map("betting_assistant")
}
